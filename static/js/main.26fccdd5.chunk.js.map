{"version":3,"sources":["components/NotesList.module.css","container/Note.module.css","components/TextBox.module.css","components/TextArea.module.css","utils/debounce.js","store/store.js","utils/localStorage.js","components/TextBox.js","components/TextArea.js","utils/dateFormatter.js","components/NotesList.js","container/Note.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","list","tag","tagSelected","title","date","main","notesList","noteEditor","btnNotes","menu","noteTitleContainer","noteContentContainer","noteContentContainerEditMode","content","btn","btnNew","btnAlert","box","debounce","func","wait","immediate","timeout","me","this","args","arguments","callNow","clearTimeout","setTimeout","apply","sortByDate","a","b","Date","newNote","oNote","Object","objectSpread","toISOString","rootReducer","combineReducers","notes","state","length","undefined","action","type","toConsumableArray","sort","concat","note","filter","id","map","persistedState","name","str","localStorage","getItem","JSON","parse","err","fetchState","console","log","store","createStore","subscribe","getState","json","setItem","stringify","saveState","store_store","TextBox","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","value","handleChange","bind","assertThisInitialized","prevProps","prevState","setState","event","_this2","target","onChange","react_default","createElement","Fragment","className","styles","charSet","Component","TexatArea","dateFormatter","strDate","moment","connect","arrNotes","isSelected","selectedId","Link","key","to","fromNow","Note","changesMade","mode","onTitleChange","onContentChange","onNoteIdChange","Math","floor","random","toString","substring","_this3","updateNote","window","confirm","removeNote","history","push","showNotesList","_this4","saveClassName","noteClassName","components_NotesList","onClick","onDeleteBtnPressed","onSaveBtnPressed","toggleNotesList","format","TextBox_TextBox","dangerouslySetInnerHTML","__html","TextArea_TexatArea","dispatch","addNote","noteId","withRouter","App","es","BrowserRouter","basename","process","app","Switch","Route","exact","path","component","startup","viewNote","editNote","Redirect","container_Note","s4","match","params","Boolean","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,KAAA,wBAAAC,IAAA,uBAAAC,YAAA,+BAAAC,MAAA,yBAAAC,KAAA,4CCAlBN,EAAAC,QAAA,CAAkBM,KAAA,mBAAAC,UAAA,wBAAAC,WAAA,yBAAAC,SAAA,uBAAAC,KAAA,mBAAAL,KAAA,mBAAAM,mBAAA,iCAAAC,qBAAA,mCAAAC,6BAAA,2CAAAT,MAAA,oBAAAU,QAAA,sBAAAC,IAAA,kBAAAC,OAAA,qBAAAC,SAAA,4CCAlBlB,EAAAC,QAAA,CAAkBkB,IAAA,0CCAlBnB,EAAAC,QAAA,CAAkBkB,IAAA,+RCiBHC,EAlBE,SAACC,EAAMC,EAAMC,GAE1B,IAAIC,EACJ,OAAO,WAEH,IAAMC,EAAKC,KAAMC,EAAOC,UAMlBC,EAAUN,IAAcC,EAC9BM,aAAaN,GACbA,EAAUO,WAPI,WAEVP,EAAU,KACLD,GAAWF,EAAKW,MAAMP,EAAIE,IAIPL,GAAQ,KAChCO,GAASR,EAAKW,MAAMP,EAAIE,KCP9BM,EAAa,SAACC,EAAGC,GAAJ,OAAW,IAAIC,KAAKD,EAAE7B,MAAQ,IAAI8B,KAAKF,EAAE5B,OAGtD+B,EAAU,SAAAC,GAEZ,IAAMD,EAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAOD,GAGpB,MAFsB,KAAlBD,EAAQhC,QAAcgC,EAAQhC,MAAQ,eAC1CgC,EAAQ/B,MAAO,IAAI8B,MAAOK,cACnBJ,GA6CLK,EAAcC,YAAgB,CAACC,MApCvB,WACd,IADeC,EACfjB,UAAAkB,OAAA,QAAAC,IAAAnB,UAAA,GAAAA,UAAA,GADuB,GAAIoB,EAC3BpB,UAAAkB,OAAA,EAAAlB,UAAA,QAAAmB,EACI,OAAQC,EAAOC,MAEX,IAAK,YACD,OAAOV,OAAAW,EAAA,EAAAX,CAAIS,EAAOJ,OAAOO,KAAKlB,GAElC,IAAK,cACD,MAAO,GAEX,IAAK,WACD,OAAOM,OAAAW,EAAA,EAAAX,CAAIM,GAAJO,OAAA,CAAWf,EAAQW,EAAOK,QAAOF,KAAKlB,GAEjD,IAAK,cAID,OADiBY,EAAMS,OAAO,SAAAD,GAAI,OAAIA,EAAKE,KAAOP,EAAOK,KAAKE,KACjDT,OAAS,EAEXD,EAAMW,IAAI,SAAAH,GAEb,OAAIA,EAAKE,KAAOP,EAAOK,KAAKE,GAAWlB,EAAQW,EAAOK,MAC/CA,IACRF,KAAKlB,GAGDM,OAAAW,EAAA,EAAAX,CAAIM,GAAJO,OAAA,CAAWf,EAAQW,EAAOK,QAAOF,KAAKlB,GAErD,IAAK,cACD,OAAOY,EAAMS,OAAO,SAAAD,GAAI,OAAIA,EAAKE,KAAOP,EAAOO,KAAIJ,KAAKlB,GAE5D,QACI,OAAOY,MAObY,EC/DoB,SAAAC,GAEzB,IAEC,IAAMC,EAAOC,aAAaC,QAAQH,GAClC,GAAY,OAARC,EAAc,OAClB,OAAOG,KAAKC,MAAMJ,GAEnB,MAAOK,GAAM,QDuDSC,CAAW,sBAElCC,QAAQC,IAAI,uCACZD,QAAQC,IAAIV,GACZ,IAAMW,EAAQC,YAAY3B,EAAae,GAIvCW,EAAME,UAAUlD,EAAS,WAIrB8C,QAAQC,IAAI,cACZD,QAAQC,IAAIC,EAAMG,WAAW3B,OCjER,SAACc,EAAMc,GAE/B,IAAMZ,aAAaa,QAAQf,EAAMI,KAAKY,UAAUF,IAChD,MAAOR,GAAME,QAAQC,IAAIH,ID+DtBW,CAAU,qBAAsB,CAAC/B,MAAOwB,EAAMG,WAAW3B,WAG7D,IAAAgC,EAAA,0BE7EqBC,cAEjB,SAAAA,EAAYC,GACZ,IAAAC,EAAA,OAAAxC,OAAAyC,EAAA,EAAAzC,CAAAb,KAAAmD,IACIE,EAAAxC,OAAA0C,EAAA,EAAA1C,CAAAb,KAAAa,OAAA2C,EAAA,EAAA3C,CAAAsC,GAAAM,KAAAzD,KAAMoD,KACDjC,MACL,CACIuC,WAA4BrC,IAArBgC,EAAKD,MAAMM,MAAsBL,EAAKD,MAAMM,MAAQ,IAE/DL,EAAKM,aAAeN,EAAKM,aAAaC,KAAlB/C,OAAAgD,EAAA,EAAAhD,QAAAgD,EAAA,EAAAhD,CAAAwC,KANxBA,kFASmBS,EAAWC,GAEtBD,EAAUJ,QAAU1D,KAAKoD,MAAMM,OAAO1D,KAAKgE,SAAS,CAACN,MAAO1D,KAAKoD,MAAMM,6CAGlEO,GACb,IAAAC,EAAAlE,KACIA,KAAKgE,SAAS,CAACN,MAAOO,EAAME,OAAOT,OAAQ,kBAAMQ,EAAKd,MAAMgB,SAASF,EAAK/C,MAAMuC,0CAKhF,OAAQW,EAAA7D,EAAA8D,cAACD,EAAA7D,EAAM+D,SAAP,KAAgBF,EAAA7D,EAAA8D,cAAA,SAAOE,UAAWC,IAAOhF,IAAK8B,KAAK,OAAOmD,QAAQ,QAAQhB,MAAO1D,KAAKmB,MAAMuC,MAAOU,SAAUpE,KAAK2D,uBAxB7FgB,8BCAhBC,cAEjB,SAAAA,EAAYxB,GACZ,IAAAC,EAAA,OAAAxC,OAAAyC,EAAA,EAAAzC,CAAAb,KAAA4E,IACIvB,EAAAxC,OAAA0C,EAAA,EAAA1C,CAAAb,KAAAa,OAAA2C,EAAA,EAAA3C,CAAA+D,GAAAnB,KAAAzD,KAAMoD,KACDjC,MACL,CACIuC,WAA4BrC,IAArBgC,EAAKD,MAAMM,MAAsBL,EAAKD,MAAMM,MAAQ,IAE/DL,EAAKM,aAAeN,EAAKM,aAAaC,KAAlB/C,OAAAgD,EAAA,EAAAhD,QAAAgD,EAAA,EAAAhD,CAAAwC,KANxBA,kFASmBS,EAAWC,GAEtBD,EAAUJ,QAAU1D,KAAKoD,MAAMM,OAAO1D,KAAKgE,SAAS,CAACN,MAAO1D,KAAKoD,MAAMM,6CAGlEO,GACb,IAAAC,EAAAlE,KACIA,KAAKgE,SAAS,CAACN,MAAOO,EAAME,OAAOT,OAAQ,kBAAMQ,EAAKd,MAAMgB,SAASF,EAAK/C,MAAMuC,0CAKhF,OACQW,EAAA7D,EAAA8D,cAAA,YAAUE,UAAWC,IAAOhF,IAAKiF,QAAQ,QAAQhB,MAAO1D,KAAKmB,MAAMuC,MAAOU,SAAUpE,KAAK2D,sBAzBlEgB,sCCExBE,EAFO,SAAAC,GAAO,OAAIC,IAAO,IAAIrE,KAAKoE,GAAS/D,iCCwB3CiE,cALS,SAAA7D,GAEpB,MAAO,CAACD,MAAOC,EAAMD,QAGV8D,CArBG,SAAA5B,GAGd,IAAM6B,EAAW7B,EAAMlC,MAAMY,IAAI,SAAAlB,GAE7B,IAAMsE,EAAatE,EAAMiB,KAAOuB,EAAM+B,WAAnB,GAAAzD,OAAoC+C,IAAOhG,IAA3C,KAAAiD,OAAkD+C,IAAO/F,aAAzD,GAAAgD,OAA6E+C,IAAOhG,KACvG,OACA4F,EAAA7D,EAAA8D,cAACc,EAAA,EAAD,CAAMC,IAAKzE,EAAMiB,GAAI2C,UAAWU,EAAYI,GAAE,IAAA5D,OAAMd,EAAMiB,IAAMlD,MAAK,iBAAA+C,OAAmBd,EAAMjC,QAC1F0F,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAO9F,OAAQiC,EAAMjC,OACrC0F,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAO7F,MAAvB,iBAA4CiG,EAAcjE,EAAMhC,MAAM2G,cAG9E,OAAIN,EAAS7D,OAAS,EAAWiD,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAOjG,MAAOyG,GACnD,+BCTVO,cAEF,SAAAA,EAAYpC,GACZ,IAAAC,EAAA,OAAAxC,OAAAyC,EAAA,EAAAzC,CAAAb,KAAAwF,IACInC,EAAAxC,OAAA0C,EAAA,EAAA1C,CAAAb,KAAAa,OAAA2C,EAAA,EAAA3C,CAAA2E,GAAA/B,KAAAzD,KAAMoD,KAMDjC,MACL,CACIsE,aAAa,EACbC,KAAMtC,EAAMsC,KAAOtC,EAAMsC,KAAO,OAChC7D,GAAIuB,EAAMvB,GACVjD,MAAM,IAAI8B,MAAOK,cACjBpC,MAAO,cACPU,QAAS,oBAGbgE,EAAKsC,cAAgBtC,EAAKsC,cAAc/B,KAAnB/C,OAAAgD,EAAA,EAAAhD,QAAAgD,EAAA,EAAAhD,CAAAwC,KACrBA,EAAKuC,gBAAkBvC,EAAKuC,gBAAgBhC,KAArB/C,OAAAgD,EAAA,EAAAhD,QAAAgD,EAAA,EAAAhD,CAAAwC,KAlB3BA,mFAuBIrD,KAAK6F,4DAGU/B,EAAWC,GAEtBD,EAAUjC,KAAO7B,KAAKoD,MAAMvB,IAAI7B,KAAK6F,0DAK7C,IAAA3B,EAAAlE,KAGQ2B,EAAO,CAACE,GADDiE,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WAAqBC,SAAS,IAAIC,UAAU,GACzDvH,MAAM,cAAeU,QAAQ,mBAAoBT,MAAK,IAAI8B,MAAOK,eAG9EkE,EAAWjF,KAAKoD,MAAMlC,MAAMU,OAAO,SAAAD,GAAI,OAAIA,EAAKE,KAAOqC,EAAKd,MAAMvB,KACpEoD,EAAS7D,OAAS,IAAGO,EAAOsD,EAAS,IACzCjF,KAAKgE,SAAS,CAACnC,GAAGF,EAAKE,GAAIlD,MAAMgD,EAAKhD,MAAOU,QAAQsC,EAAKtC,QAAST,KAAK+C,EAAK/C,6CAInEqD,GAEVjC,KAAKgE,SAAS,CAACyB,aAAY,EAAM9G,MAAMsD,4CAI3BA,GAEZjC,KAAKgE,SAAS,CAACyB,aAAY,EAAMpG,QAAQ4C,+CAK7C,IAAAkE,EAAAnG,KACU2B,EAAO,CAACE,GAAG7B,KAAKmB,MAAMU,GAAIlD,MAAMqB,KAAKmB,MAAMxC,MAAOU,QAAQW,KAAKmB,MAAM9B,SAC3EW,KAAKgE,SAAS,CAACyB,aAAY,GAAQ,kBAAMU,EAAK/C,MAAMgD,WAAWzE,mDAOrD,IADA0E,OAAOC,QAAQ,gDAGrBtG,KAAKoD,MAAMmD,WAAWvG,KAAKmB,MAAMU,IACjC7B,KAAKoD,MAAMoD,QAAQC,KAAK,gDAO5BzG,KAAKgE,SAAS,CAAC0C,eAAe1G,KAAKmB,MAAMuF,iDAI7C,IAAAC,EAAA3G,KACU4G,GAA2C,IAA3B5G,KAAKmB,MAAMsE,YAAX,GAAA/D,OAAqC+C,IAAOnF,IAA5C,KAAAoC,OAAmD+C,IAAOjF,UAA1D,GAAAkC,OAA0E+C,IAAOnF,KACjGuH,EAAoC,SAApB7G,KAAKoD,MAAMsC,KAAX,GAAAhE,OAAgC+C,IAAOtF,qBAAvC,KAAAuC,OAA+D+C,IAAOrF,8BAAtE,GAAAsC,OAA0G+C,IAAOtF,sBACvI,OACIkF,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAO5F,MACnBwF,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAO3F,WACnBuF,EAAA7D,EAAA8D,cAACwC,EAAD,CAAW5F,MAAOlB,KAAKoD,MAAMlC,MAAOiE,WAAYnF,KAAKmB,MAAMU,MAE/DwC,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAO1F,YACnBsF,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAOxF,MACnBoF,EAAA7D,EAAA8D,cAACc,EAAA,EAAD,CAAMZ,UAAS,GAAA9C,OAAK+C,IAAOnF,IAAZ,KAAAoC,OAAmB+C,IAAOlF,QAAU+F,GAAE,OAAU3G,MAAM,kBAAiB0F,EAAA7D,EAAA8D,cAAA,KAAGE,UAAU,gBAAnG,oBACqB,SAApBxE,KAAKoD,MAAMsC,KAAkBrB,EAAA7D,EAAA8D,cAACc,EAAA,EAAD,CAAMZ,UAAWC,IAAOnF,IAAKgG,GAAE,IAAA5D,OAAM1B,KAAKmB,MAAMU,GAAjB,SAA4BlD,MAAM,aAAY0F,EAAA7D,EAAA8D,cAAA,KAAGE,UAAU,gBAA1F,gBAAsI,KAC/I,SAApBxE,KAAKoD,MAAMsC,KAAkBrB,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAOnF,IAAKyH,QAAS,kBAAMJ,EAAKK,sBAAsBrI,MAAM,eAAc0F,EAAA7D,EAAA8D,cAAA,KAAGE,UAAU,iBAAvG,kBAAqJ,KAC9J,SAApBxE,KAAKoD,MAAMsC,KAAkBrB,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWoC,EAAeG,QAAS,kBAAMJ,EAAKM,oBAAoBtI,MAAM,aAAY0F,EAAA7D,EAAA8D,cAAA,KAAGE,UAAU,gBAAtG,gBAAiJ,KAC/KH,EAAA7D,EAAA8D,cAAA,OAAKE,UAAS,GAAA9C,OAAK+C,IAAOnF,IAAZ,KAAAoC,OAAmB+C,IAAOzF,UAAY+H,QAAS,kBAAMJ,EAAKO,mBAAmBvI,MAAM,qBAAoB0F,EAAA7D,EAAA8D,cAAA,KAAGE,UAAU,kBAEtIH,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAO7F,MAAOiG,EAAc7E,KAAKmB,MAAMvC,MAAMuI,OAAO,SACpE9C,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAOvF,oBACE,SAApBc,KAAKoD,MAAMsC,KAAkBrB,EAAA7D,EAAA8D,cAAC8C,EAAD,CAAShD,SAAUpE,KAAK2F,cAAejC,MAAO1D,KAAKmB,MAAMxC,QAAY0F,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAO9F,MAAO0I,wBAAyB,CAACC,OAAQtH,KAAKmB,MAAMxC,UAElL0F,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWqC,GACS,SAApB7G,KAAKoD,MAAMsC,KAAkBrB,EAAA7D,EAAA8D,cAACiD,EAAD,CAAUnD,SAAUpE,KAAK4F,gBAAiBlC,MAAO1D,KAAKmB,MAAM9B,UAAcgF,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAOpF,QAASgI,wBAAyB,CAACC,OAAQtH,KAAKmB,MAAM9B,qBAzG1LsF,aAiIJK,cAhBS,SAAA7D,GAEpB,MAAO,CACHD,MAAOC,EAAMD,QAIM,SAAAsG,GAEvB,MAAO,CACHC,QAAS,SAAA7G,GAAK,OAAI4G,ENhDH,SAAA5G,GAAK,MAAK,CAACW,KAAM,WAAYI,KAAKf,GMgDtB6G,CAAQ7G,KACnCwF,WAAY,SAAAxF,GAAK,OAAI4G,ENhDH,SAAA5G,GAAK,MAAK,CAACW,KAAM,cAAeI,KAAKf,GMgDzBwF,CAAWxF,KACzC2F,WAAY,SAAAmB,GAAM,OAAIF,ENhDJ,SAAAE,GAAM,MAAK,CAACnG,KAAM,cAAeM,GAAG6F,GMgDvBnB,CAAWmB,OAInC1C,CAA6C2C,YAAWnC,qBCpIlDoC,mLAMb,OACIvD,EAAA7D,EAAA8D,cAACuD,EAAA,EAAD,CAAUnF,MAAOA,GACb2B,EAAA7D,EAAA8D,cAACwD,EAAA,EAAD,CAAeC,SAAUC,mBACrB3D,EAAA7D,EAAA8D,cAAA,OAAKE,UAAWC,IAAOwD,KACnB5D,EAAA7D,EAAA8D,cAAC4D,EAAA,EAAD,KACI7D,EAAA7D,EAAA8D,cAAC6D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjClE,EAAA7D,EAAA8D,cAAC6D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAW3H,IACpC0D,EAAA7D,EAAA8D,cAAC6D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWE,IACpCnE,EAAA7D,EAAA8D,cAAC6D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWG,IACzCpE,EAAA7D,EAAA8D,cAACoE,EAAA,EAAD,CAAUpD,GAAG,iBAfRX,aAqC3B4D,EAAUvD,YADQ,SAAA7D,GAAK,MAAK,CAACD,MAAOC,EAAMD,QAChC8D,CAVA,SAAA5B,GAEZ,OAA2B,IAAvBA,EAAMlC,MAAME,OACLT,IAEC0D,EAAA7D,EAAA8D,cAACqE,EAAD,CAAMjD,KAAK,OAAO7D,GAAIuB,EAAMlC,MAAM,GAAGW,OAQ/ClB,EAAU,WAEZ,IAAMiI,EAAK9C,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WAAqBC,SAAS,IAAIC,UAAU,GAC5E,OAAQ7B,EAAA7D,EAAA8D,cAACqE,EAAD,CAAMjD,KAAK,OAAO7D,GAAI+G,KAI5BJ,EAAW,SAAApF,GAAK,OAAKiB,EAAA7D,EAAA8D,cAACqE,EAAD,CAAMjD,KAAK,OAAO7D,GAAIuB,EAAMyF,MAAMC,OAAOjH,MAG9D4G,EAAW,SAAArF,GAAK,OAAKiB,EAAA7D,EAAA8D,cAACqE,EAAD,CAAMjD,KAAK,OAAO7D,GAAIuB,EAAMyF,MAAMC,OAAOjH,MC7ChDkH,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASJ,MACvB,2DCZNK,IAASC,OAAO9E,EAAA7D,EAAA8D,cAAC8E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.26fccdd5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"NotesList_list__3-vpX\",\"tag\":\"NotesList_tag__nGKBJ\",\"tagSelected\":\"NotesList_tagSelected__1xmFJ\",\"title\":\"NotesList_title__mX88b\",\"date\":\"NotesList_date__1xsEZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Note_main__2giOS\",\"notesList\":\"Note_notesList__2sPct\",\"noteEditor\":\"Note_noteEditor__2ywwK\",\"btnNotes\":\"Note_btnNotes__2FJrn\",\"menu\":\"Note_menu__3SbA8\",\"date\":\"Note_date__1uhkv\",\"noteTitleContainer\":\"Note_noteTitleContainer__1Gm-p\",\"noteContentContainer\":\"Note_noteContentContainer__1VcSO\",\"noteContentContainerEditMode\":\"Note_noteContentContainerEditMode__1Hp9Z\",\"title\":\"Note_title__NSW3N\",\"content\":\"Note_content__1ynvP\",\"btn\":\"Note_btn__1SZWs\",\"btnNew\":\"Note_btnNew__S5C4E\",\"btnAlert\":\"Note_btnAlert__apCUb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"TextBox_box__2l3mD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"TextArea_box__3BeXH\"};","const debounce = (func, wait, immediate) =>\r\n{\r\n    let timeout;\r\n    return function() \r\n    {\r\n        const me = this, args = arguments;\r\n        const later = function() \r\n        {\r\n            timeout = null;\r\n            if (!immediate) func.apply(me, args);\r\n        };\r\n        const callNow = immediate && !timeout;\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait || 250);\r\n        if (callNow) func.apply(me, args);\r\n    };\r\n};\r\n\r\nexport default debounce;","import {createStore, combineReducers} from 'redux';\r\nimport {fetchState, saveState} from '../utils/localStorage';\r\nimport debounce from '../utils/debounce';\r\n\r\n// Util functions.\r\n\r\n// Sort notes by date - most recent first.\r\nconst sortByDate = (a, b) => (new Date(b.date) - new Date(a.date));\r\n\r\n// Updates the time stamp on the note and adds a title if not supplied.\r\nconst newNote = oNote =>\r\n{\r\n    const newNote = {...oNote};\r\n    if (newNote.title === '') newNote.title = 'Add A Title';\r\n    newNote.date = new Date().toISOString();\r\n    return newNote;\r\n};\r\n\r\n// Reducers\r\n\r\n// Store notes as an object: {id:\"####\"\", date:\"##/##/##\", title:\"A Title\", content:\"Some Content\"}\r\n// In general you only have to pass in {id:\"####\"\", title:\"A Title\", content:\"Some Content\"}\r\n// The date is autogenerated in ADD_NOTE.\r\n// The id is the unique key for accessing the notes.\r\nconst notes = (state = [], action) => \r\n{\r\n    switch (action.type) \r\n    {\r\n        case 'SET_NOTES': // Pass in an array of note objects (used to load from local storage).\r\n            return [...action.notes].sort(sortByDate);\r\n\r\n        case 'CLEAR_NOTES': // Empty the array of note objects.\r\n            return []; \r\n\r\n        case 'ADD_NOTE': // Add a new note object.\r\n            return [...state, newNote(action.note)].sort(sortByDate);\r\n\r\n        case 'UPDATE_NOTE': // Update a note - use the note id to reference it - this will add the note if it doesnt exist already.\r\n\r\n            // Check if the note exists\r\n            const arrNotes = state.filter(note => note.id === action.note.id);\r\n            if (arrNotes.length > 0)  // Note exists so update it.\r\n            {\r\n                return state.map(note =>\r\n                {\r\n                    if (note.id === action.note.id) return newNote(action.note);\r\n                    return note;\r\n                }).sort(sortByDate);\r\n            }\r\n            else  // Note doesnt exists so add it. \r\n                return [...state, newNote(action.note)].sort(sortByDate);\r\n                \r\n        case 'REMOVE_NOTE': // Remove a note - use the note id to reference it.\r\n            return state.filter(note => note.id !== action.id).sort(sortByDate);\r\n\r\n        default:\r\n            return state; \r\n    }\r\n};\r\n\r\nconst rootReducer = combineReducers({notes: notes});\r\n\r\n// Fetch any state stored in local storage and use this when creating the store.\r\nconst persistedState = fetchState('astrosat-notes-app');\r\n\r\nconsole.log('PERSISTED STATE FROM LOCAL STORAGE:');\r\nconsole.log(persistedState);\r\nconst store = createStore(rootReducer, persistedState);\r\n\r\n// Subscribe to changes to the store so we can update local storage.\r\n// Possibilty of this being called alot so use debounce.\r\nstore.subscribe(debounce(() =>\r\n{\r\n    // This is where youd write to a database if implementing permanent storage.\r\n\r\n    console.log('SAVE STATE');\r\n    console.log(store.getState().notes);\r\n    saveState('astrosat-notes-app', {notes: store.getState().notes});\r\n}));\r\n\r\nexport default store;\r\n\r\n// Actions\r\nexport const setNotes = arrNotes => ({type: 'SET_NOTES', notes:arrNotes});\r\nexport const clearNotes = () => ({type: 'CLEAR_NOTES'});\r\nexport const addNote = oNote => ({type: 'ADD_NOTE', note:oNote});\r\nexport const updateNote = oNote => ({type: 'UPDATE_NOTE', note:oNote});\r\nexport const removeNote = noteId => ({type: 'REMOVE_NOTE', id:noteId});","export const fetchState = name =>\r\n{\r\n\ttry \r\n\t{\r\n\t\tconst str =  localStorage.getItem(name);\r\n\t\tif (str === null) return undefined;\r\n\t\treturn JSON.parse(str);\r\n\t}\r\n\tcatch (err) {return undefined;}\r\n};\r\n\r\nexport const saveState = (name, json) =>\r\n{\r\n\ttry  {localStorage.setItem(name, JSON.stringify(json));}\r\n\tcatch (err) {console.log(err);}\r\n};\r\n","import React, {Component}  from 'react';\r\nimport styles from './TextBox.module.css';\r\n\r\nexport default class TextBox extends Component\r\n{\r\n    constructor(props) \r\n    {\r\n        super(props);\r\n        this.state = \r\n        {\r\n            value: this.props.value !== undefined ? this.props.value : ''\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState) \r\n    {\r\n        if (prevProps.value !== this.props.value) this.setState({value: this.props.value});\r\n    }\r\n\r\n    handleChange(event) \r\n    {\r\n        this.setState({value: event.target.value}, () => this.props.onChange(this.state.value));\r\n    }\r\n\r\n    render() \r\n    {\r\n        return (<React.Fragment><input className={styles.box} type=\"text\" charSet=\"utf-8\" value={this.state.value} onChange={this.handleChange} /></React.Fragment>);\r\n    }\r\n};","import React, {Component}  from 'react';\r\nimport styles from './TextArea.module.css';\r\n\r\nexport default class TexatArea extends Component\r\n{\r\n    constructor(props) \r\n    {\r\n        super(props);\r\n        this.state = \r\n        {\r\n            value: this.props.value !== undefined ? this.props.value : ''\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState) \r\n    {\r\n        if (prevProps.value !== this.props.value) this.setState({value: this.props.value});\r\n    }\r\n\r\n    handleChange(event) \r\n    {\r\n        this.setState({value: event.target.value}, () => this.props.onChange(this.state.value));\r\n    }\r\n\r\n    render() \r\n    {\r\n        return (\r\n                <textarea className={styles.box} charSet=\"utf-8\" value={this.state.value} onChange={this.handleChange} />\r\n        );\r\n    }\r\n};","import moment from 'moment';\r\n\r\n// Added a wrapper around moent.js because of some weirdness with date string formatting.\r\nconst dateFormatter = strDate => moment(new Date(strDate).toISOString());\r\n\r\nexport default dateFormatter;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport dateFormatter from '../utils/dateFormatter';\r\nimport styles from './NotesList.module.css';\r\n\r\nconst NotesList = props =>\r\n{ \r\n    // Need to highlight the note if its selected - that should be passed in as a prop with the note id.\r\n    const arrNotes = props.notes.map(oNote => \r\n    {\r\n        const isSelected = oNote.id === props.selectedId ?  `${styles.tag} ${styles.tagSelected}`  : `${styles.tag}`;\r\n        return (\r\n        <Link key={oNote.id} className={isSelected} to={`/${oNote.id}`} title={`Click to view ${oNote.title}`}> \r\n            <div className={styles.title}>{oNote.title}</div>\r\n            <div className={styles.date}>Last Updated: {dateFormatter(oNote.date).fromNow()}</div>\r\n        </Link>)\r\n    });\r\n    if (arrNotes.length > 0)  return <div className={styles.list}>{arrNotes}</div>\r\n    else return null;\r\n};\r\n\r\nconst mapStateToProps = state => \r\n{\r\n    return {notes: state.notes}\r\n};\r\n\r\nexport default connect(mapStateToProps)(NotesList)","import React, {Component}  from 'react';\r\nimport TextBox from '../components/TextBox';\r\nimport TextArea from '../components/TextArea';\r\nimport NotesList from '../components/NotesList';\r\nimport {addNote, removeNote, updateNote} from '../store/store';\r\nimport {connect} from 'react-redux';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport dateFormatter from '../utils/dateFormatter';\r\nimport styles from './Note.module.css';\r\n\r\nclass Note extends Component\r\n{\r\n    constructor(props) \r\n    {\r\n        super(props);\r\n\r\n        // passed in props... \r\n        // prop:mode edit|view\r\n        // prop:id the note id\r\n\r\n        this.state =  \r\n        { \r\n            changesMade: false,\r\n            mode: props.mode ? props.mode : 'view',\r\n            id: props.id,\r\n            date: new Date().toISOString(),\r\n            title: 'Add A Title',\r\n            content: 'Add Some Content'\r\n        };\r\n\r\n        this.onTitleChange = this.onTitleChange.bind(this);\r\n        this.onContentChange = this.onContentChange.bind(this);\r\n    }\r\n\r\n    componentDidMount()\r\n    {  \r\n        this.onNoteIdChange();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) \r\n    {\r\n        if (prevProps.id !== this.props.id) this.onNoteIdChange();\r\n    }\r\n\r\n    // The note id prop has changed.\r\n    onNoteIdChange()\r\n    { \r\n        // Default new note.\r\n        const s4 = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        let note = {id:s4, title:'Add A Title', content:'Add Some Content', date:new Date().toISOString()};\r\n\r\n        // Does the note exist already?\r\n        const arrNotes = this.props.notes.filter(note => note.id === this.props.id);\r\n        if (arrNotes.length > 0) note = arrNotes[0]; // Note found!\r\n        this.setState({id:note.id, title:note.title, content:note.content, date:note.date});\r\n    }\r\n\r\n    // Note title changed.\r\n    onTitleChange(str)\r\n    {\r\n        this.setState({changesMade:true, title:str});\r\n    }\r\n\r\n    // Note content changed.\r\n    onContentChange(str)\r\n    {\r\n        this.setState({changesMade:true, content:str});\r\n    }\r\n\r\n    // Save note button pressed.\r\n    onSaveBtnPressed()\r\n    {\r\n        const note = {id:this.state.id, title:this.state.title, content:this.state.content};\r\n        this.setState({changesMade:false}, () => this.props.updateNote(note));\r\n    }\r\n\r\n    // Delete note button pressed.\r\n    onDeleteBtnPressed()\r\n    {\r\n        const r = window.confirm('Are you sure you want to delete this note?');\r\n        if (r === true) \r\n        {\r\n            this.props.removeNote(this.state.id);\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    // Toggle Notes list.\r\n    toggleNotesList()\r\n    {\r\n        this.setState({showNotesList:!this.state.showNotesList});\r\n    }\r\n\r\n    render() \r\n    {\r\n        const saveClassName = this.state.changesMade === true ? `${styles.btn} ${styles.btnAlert}` : `${styles.btn}`;\r\n        const noteClassName = this.props.mode === 'edit' ? `${styles.noteContentContainer} ${styles.noteContentContainerEditMode}` : `${styles.noteContentContainer}`;\r\n        return (\r\n            <div className={styles.main}>\r\n                <div className={styles.notesList}>\r\n                    <NotesList notes={this.props.notes} selectedId={this.state.id} />\r\n                </div>\r\n                <div className={styles.noteEditor}>\r\n                    <div className={styles.menu}>\r\n                        <Link className={`${styles.btn} ${styles.btnNew}`} to={`/new`} title=\"Add A New Note\"><i className=\"fas fa-plus\"></i>&nbsp;&nbsp;New Note</Link>\r\n                        {this.props.mode === 'view' ? <Link className={styles.btn} to={`/${this.state.id}/edit`} title=\"Edit Note\"><i className=\"fas fa-edit\"></i>&nbsp;&nbsp;Edit</Link> : null}\r\n                        {this.props.mode === 'view' ? <div className={styles.btn} onClick={() => this.onDeleteBtnPressed()} title=\"Delete Note\"><i className=\"fas fa-trash\"></i>&nbsp;&nbsp;Delete</div> : null}\r\n                        {this.props.mode === 'edit' ? <div className={saveClassName} onClick={() => this.onSaveBtnPressed()} title=\"Save Note\"><i className=\"fas fa-save\"></i>&nbsp;&nbsp;Save</div> : null}\r\n                        <div className={`${styles.btn} ${styles.btnNotes}`} onClick={() => this.toggleNotesList()} title=\"Toggle Notes List\"><i className=\"fas fa-bars\"></i></div>\r\n                    </div>\r\n                    <div className={styles.date}>{dateFormatter(this.state.date).format('llll')}</div>\r\n                    <div className={styles.noteTitleContainer}>\r\n                        {this.props.mode === 'edit' ? <TextBox onChange={this.onTitleChange} value={this.state.title} /> : <div className={styles.title} dangerouslySetInnerHTML={{__html: this.state.title}} />}\r\n                    </div>\r\n                    <div className={noteClassName}>\r\n                        {this.props.mode === 'edit' ? <TextArea onChange={this.onContentChange} value={this.state.content} /> : <div className={styles.content} dangerouslySetInnerHTML={{__html: this.state.content}} />}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => \r\n{\r\n    return {\r\n        notes: state.notes\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => \r\n{\r\n    return {\r\n        addNote: oNote => dispatch(addNote(oNote)),\r\n        updateNote: oNote => dispatch(updateNote(oNote)),\r\n        removeNote: noteId => dispatch(removeNote(noteId))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Note)); // Need to add withRouter so we have access to history for deleting notes... this.props.history.push('/');","import React, {Component} from 'react';\r\nimport {Provider, connect} from 'react-redux';\r\nimport {BrowserRouter, Route, Redirect, Switch} from 'react-router-dom';\r\nimport store from './store/store';\r\nimport Note from './container/Note';\r\nimport styles from './App.module.css';\r\n\r\nexport default class App extends Component\r\n{ \r\n    // basename - pulled from homepage prop in package.json.\r\n    // Redirect - Any bad urls redirected to base url.\r\n    render() \r\n    {\r\n        return (\r\n            <Provider store={store}>   \r\n                <BrowserRouter basename={process.env.PUBLIC_URL}> \r\n                    <div className={styles.app}>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={startup} />\r\n                            <Route exact path=\"/new\" component={newNote} />\r\n                            <Route exact path=\"/:id\" component={viewNote} />\r\n                            <Route exact path=\"/:id/edit\" component={editNote} />\r\n                            <Redirect to=\"/\" />\r\n                        </Switch>\r\n                    </div>\r\n                </BrowserRouter>\r\n            </Provider>\r\n        );\r\n    }\r\n};\r\n\r\n// Route functions.\r\n\r\n// Default view is dependent on notes having been created.\r\nconst initApp = props => \r\n{\r\n    if (props.notes.length === 0)\r\n        return newNote(); // No notes created yet.\r\n    else\r\n        return (<Note mode=\"view\" id={props.notes[0].id} />); // Notes created - view first note.\r\n};\r\n\r\n// We want to know if any notes have been created at startup so pass the notes into initApp() as a prop from the store.\r\nconst mapStateToProps = state => ({notes: state.notes});\r\nconst startup = connect(mapStateToProps)(initApp);\r\n\r\n// New note.\r\nconst newNote = () => \r\n{\r\n    const s4 = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1); // Unique id for note.\r\n    return (<Note mode=\"edit\" id={s4} />);\r\n};\r\n\r\n// View a note - the default view if notes are available.\r\nconst viewNote = props => (<Note mode=\"view\" id={props.match.params.id} />);\r\n\r\n// Edit a note.\r\nconst editNote = props => (<Note mode=\"edit\" id={props.match.params.id} />);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}