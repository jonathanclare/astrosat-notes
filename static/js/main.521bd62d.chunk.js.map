{"version":3,"sources":["utils/debounce.js","store/store.js","utils/localStorage.js","App.js","serviceWorker.js","index.js"],"names":["debounce","func","wait","immediate","timeout","me","this","args","arguments","callNow","clearTimeout","setTimeout","apply","rootReducer","combineReducers","notes","state","length","undefined","action","type","Object","toConsumableArray","concat","note","map","id","filter","persistedState","name","str","localStorage","getItem","JSON","parse","err","fetchState","console","log","store","createStore","subscribe","json","setItem","stringify","saveState","getState","store_store","App","react_default","a","createElement","es","BrowserRouter","basename","process","className","styles","app","Switch","Route","exact","path","component","startup","addNote","showNote","editNote","Redirect","to","Component","connect","props","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.521bd62d.chunk.js","sourcesContent":["const debounce = (func, wait, immediate) =>\r\n{\r\n    let timeout;\r\n    return function() \r\n    {\r\n        const me = this, args = arguments;\r\n        const later = function() \r\n        {\r\n            timeout = null;\r\n            if (!immediate) func.apply(me, args);\r\n        };\r\n        const callNow = immediate && !timeout;\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait || 250);\r\n        if (callNow) func.apply(me, args);\r\n    };\r\n};\r\n\r\nexport default debounce;","import {createStore, combineReducers} from 'redux';\r\nimport {fetchState, saveState} from '../utils/localStorage';\r\nimport debounce from '../utils/debounce';\r\n\r\n// Reducers\r\n\r\n// Store notes as an object: {id:\"####\"\" , title:\"A Title\", content:\"Some Content\", date:\"The date\"}\r\nconst notes = (state = [], action) => \r\n{\r\n    switch (action.type) \r\n    {\r\n        case 'SET_NOTES':\r\n            return [...action.notes];\r\n        case 'CLEAR_NOTES':\r\n            return [];\r\n        case 'ADD_NOTE':\r\n            return [...state, action.note];\r\n        case 'UPDATE_NOTE':\r\n            return state.map(note =>\r\n            {\r\n                if (note.id === action.note.id) return action.note;\r\n                return note;\r\n            });\r\n        case 'REMOVE_NOTE':\r\n            return state.filter(note => note.id !== action.id);\r\n        default:\r\n            return state; \r\n    }\r\n};\r\n\r\nconst rootReducer = combineReducers(\r\n{\r\n    notes: notes\r\n});\r\n\r\n// Fetch any state stored in local storage and use this when creating the store.\r\nconst persistedState = fetchState('astrosat-notes-app');\r\n\r\nconsole.log('PERSISTED STATE FROM LOCAL STORAGE:');\r\nconsole.log(persistedState);\r\nconst store = createStore(rootReducer, persistedState);\r\n\r\n// Subscribe to changes to the store so we can update local storage.\r\nstore.subscribe(debounce(() =>\r\n{\r\n    saveState('astrosat-notes-app', \r\n    {\r\n        notes: store.getState().notes,\r\n    });\r\n}));\r\n\r\nexport default store;\r\n\r\n// Actions\r\nexport const clearNotes = () => ({type: 'CLEAR_NOTES'});\r\nexport const setNotes = arrNotes => ({type: 'SET_NOTES', notes:arrNotes});\r\nexport const addNote = oNote => ({type: 'ADD_NOTE', note:oNote});\r\nexport const updateNote = oNote => ({type: 'UPDATE_NOTE', note:oNote});\r\nexport const removeNote = noteId => ({type: 'REMOVE_NOTE', id:noteId});","export const fetchState = name =>\r\n{\r\n\ttry \r\n\t{\r\n\t\tconst str =  localStorage.getItem(name);\r\n\t\tif (str === null) return undefined;\r\n\t\treturn JSON.parse(str);\r\n\t}\r\n\tcatch (err) {return undefined;}\r\n};\r\n\r\nexport const saveState = (name, json) =>\r\n{\r\n\ttry  {localStorage.setItem(name, JSON.stringify(json));}\r\n\tcatch (err) {console.log(err);}\r\n};\r\n","import React, {Component} from 'react';\nimport {Provider, connect} from 'react-redux'\nimport {BrowserRouter, Route, Redirect, Switch} from 'react-router-dom';\nimport store from './store/store';\nimport styles from './App.module.css';\n\nexport default class App extends Component\n{ \n    render() \n    {\n        return (\n            <Provider store={store}>   \n                <BrowserRouter basename={process.env.PUBLIC_URL}>\n                    <div className={styles.app}>\n                        <Switch>\n                            <Route exact path=\"/\" component={startup} />\n                            <Route exact path=\"/add\" component={addNote} />\n                            <Route exact path=\"/note/:id\" component={showNote} />\n                            <Route exact path=\"/edit/:id\" component={editNote} />\n                            <Redirect to=\"/\" /> {/* Any bad urls redirected to base url */}\n                        </Switch>\n                    </div>\n                </BrowserRouter>\n            </Provider>\n        );\n    }\n};\n\n// Route functions.\n\n// Default view is dependent on notes being available.\nconst initApp = props => \n{\n    if (props.notes.length === 0) // No notes created yet.\n        return addNote(props);\n    else\n        return showNote(props);\n};\n// We want to know if any notes have been created at startup so pass the notes into initApp() as a prop from the store.\nconst mapStateToProps = state => ({notes: state.notes});\nconst startup = connect(mapStateToProps)(initApp);\n\n// Add a new note page - the default view if no notes are available.\nconst addNote = props => \n{\n    return (<div>Add Note</div>);\n};\n\n// Show a note page - the default view if notes are available.\nconst showNote = props => \n{\n    return (<div>Show Note</div>);\n};\n\n\n// Edit a note page.\nconst editNote = props => \n{\n    return (<div>Edit Note</div>);\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}